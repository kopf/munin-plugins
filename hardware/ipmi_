#!/usr/local/bin/perl
# Copyright (c) 2011
# Distilled Media Ltd.  All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 3. Neither the name of the author nor the names of any contributors to the
#    software may be used to endorse or promote products derived from this
#    software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

#
# Monitors hardware sensors using IPMItool
#
# This is a wildcard plugin. Examples:
#
# * Monitor the 'Planar Temp' sensor:
#        ipmitool_planar-temp
# * Monitor the 'DIMM Fan' and 'PROC Fan' sensors in the one graph:
#        ipmi_dimm-fan_proc-fan
#
# `ipmitool_ suggest` should tell you what sensors are available on your system.
#

use strict;
use warnings;

my $IPMITOOL = $ENV{'ipmitool'} || '/usr/local/bin/ipmitool';

# Read the sensor data that is available to us.
my %sensors;
my %units;
my %warning;
my %critical;
if (open(IPMITOOL, "$IPMITOOL sensor|")) {
    while (<IPMITOOL>) {
        chomp;
        my($sensor, $value, $units, undef, undef, undef, undef, $warning, $critical) = split(/\s+\|\s+/o);
        if ($value ne "na") {
            $sensors{$sensor} = $value;
            $units{$sensor} = $units;
            $warning{$sensor} = $warning unless $warning eq 'na';
            $critical{$sensor} = $critical unless $critical eq 'na';
        }
    }
    close(IPMITOOL);
}

# Find the sensors we want by examining the name
my @wanted_sensors;
foreach my $sensor (sort keys %sensors) {
    my $cli_name = &cli_name($sensor);
    if ($0 =~ /_$cli_name(?:$|_)/) {
        push @wanted_sensors, [$sensor, $cli_name];
    }
}

# Select modes depending on the arguments 
if (@ARGV) {
    if ($ARGV[0] eq 'suggest') {
        # Suggestion mode
        my @cli_sensors;
        foreach my $sensor (sort keys %sensors) {
            printf("%s\n", &cli_name($sensor));
        }
    } elsif ($ARGV[0] eq 'config') {
        # Configuration mode

        # Make the title
        my $title = 'IPMI Sensors: ';
        for (my $i = 0; $i < @wanted_sensors; $i++) {
            if ($i > 0) {
                if ($i + 1 == @wanted_sensors) {
                    $title .= ' & ';
                } else {
                    $title .= ', ';
                }
            }
            $title .= $wanted_sensors[$i][0];
        }

        # Make the y-axis label
        my %vlabels;
        foreach (@wanted_sensors) {
            $vlabels{$units{$_->[0]}} = 1;
        }
        my $vlabel = join('/', sort keys %vlabels);

        # Print the config
        print <<CONFIG;
graph_title $title
graph_vlabel $vlabel
graph_category hardware
CONFIG
        foreach (@wanted_sensors) {
            printf("%s.label %s\n", $_->[1], $_->[0]);
            printf("%s.warning %s\n", $_->[1], $warning{$_->[0]}) if $warning{$_->[0]};
            printf("%s.critical %s\n", $_->[1], $critical{$_->[0]}) if $critical{$_->[0]};
        }
    }
} else {
    # Output mode

    # Get the values
    foreach my $wanted (@wanted_sensors) {
        my ($sensor, $cli_name) = @{$wanted};
        printf("%s.value %s\n", $cli_name, $sensors{$sensor});
    }
}

# Convert a sensor name into a CLI-friendly name.
sub cli_name {
    my $cli_name = shift;
    $cli_name =~ tr/[A-Z]/[a-z]/;
    $cli_name =~ s/\W/-/go;
    return $cli_name;
}
